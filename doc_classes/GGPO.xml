<?xml version="1.0" encoding="UTF-8" ?>
<class name="GGPO" inherits="Object" category="Core" version="1.0.0">
    <brief_description>
        Implementation of the GGPO interface. https://ggpo.net
    </brief_description>
    <description>
        Traditional techniques account for network transmission time by adding delay to a players input, resulting in a sluggish, laggy game-feel. Rollback networking uses input prediction and speculative execution to send player inputs to the game immediately, providing the illusion of a zero-latency network. Using rollback, the same timings, reactions, visual and audio queues, and muscle memory your players build up playing offline will translate directly online. The GGPO networking SDK is designed to make incorporating rollback networking into new and existing games as easy as possible.
        For more information about the history of GGPO, check out http://ggpo.net/
    </description>
    <tutorials>
    </tutorials>
    <methods>
        <method name="addLocalInput">
            <return type="int">
            </return>
            <argument index="0" name="localPlayerHandle" type="int">
            </argument>
            <argument index="1" name="input" type="int">
            </argument>
            <description>
                Used to notify GGPO.net of inputs that should be trasmitted to remote
                players.  ggpo_add_local_input must be called once every frame for
                all player of type GGPO_PLAYERTYPE_LOCAL.
            </description>
        </method>
        <method name="addPlayer">
            <return type="Dictionary">
            </return>
            <argument index="0" name="playerType" type="int">
            </argument>
            <argument index="1" name="playerNum" type="int">
            </argument>
            <argument index="2" name="playerIpAddress" type="String">
            </argument>
            <argument index="3" name="playerPort" type="int">
            </argument>
            <description>
                Must be called for each player in the session (e.g. in a 3 player session, must
                be called 3 times).

                player - A GGPOPlayer struct used to describe the player.

                handle - An out parameter to a handle used to identify this player in the future.
                (e.g. in the on_event callbacks).
                Returns a [Dictionary] containing the following:
                [*] [code]result[/code]: The error code of the method
                [*] [code]playerType[/code]: The type of the player
                [*] [code]playerNum[/code]: The number of the player
                [*] [code]playerIpAddress[/code]: The IP address of the remote player
                [*] [code]playerPort[/code]: The port of the remote player
                [*] [code]playerHandle[/code]: The handle of the player
            </description>
        </method>
        <method name="advanceFrame">
            <return type="int">
            </return>
            <description>
                You should call ggpo_advance_frame to notify GGPO.net that you have
                advanced your gamestate by a single frame.  You should call this everytime
                you advance the gamestate by a frame, even during rollbacks.  GGPO.net
                may call your save_state callback before this function returns.
            </description>
        </method>
        <method name="closeSession">
            <return type="int">
            </return>
            <description>
                Used to close a session.  You must call ggpo_close_session to
                free the resources allocated in ggpo_start_session.
            </description>
        </method>
        <method name="disconnectPlayer">
            <return type="int">
            </return>
            <argument index="0" name="playerHandle" type="int">
            </argument>
            <description>
                Disconnects a remote player from a game.  Will return GGPO_ERRORCODE_PLAYER_DISCONNECTED
                if you try to disconnect a player who has already been disconnected.
            </description>
        </method>
        <method name="getNetworkStats">
            <return type="Dictionary">
            </return>
            <argument index="0" name="playerHandle" type="int">
            </argument>
            <description>
                Used to fetch some statistics about the quality of the network connection.
                Returns a [Dictionary] containing the following:
                [*] [code]result[/code]: The error code of the method;
                [*] [code]sendQueueLen[/code]: The length of the queue containing UDP packets which have not yet been acknowledged by the end client;
                [*] [code]recvQueueLen[/code]: The number of inputs currently buffered by the GGPO.net network layer which have yet to be validated;
                [*] [code]ping[/code]: The roundtrip packet transmission time as calculated by GGPO.net;
                [*] [code]kbpsSent[/code]: The estimated bandwidth used between the two clients, in kilobits per second;
                [*] [code]localFramesBehind[/code]: The number of frames GGPO.net calculates that the local client is behind the remote client at this instant in time;
                [*] [code]remoteFramesBehind[/code]: The same as [code]localFramesBehind[/code], but calculated from the perspective of the remote player.
            </description>
        </method>
        <method name="idle">
            <return type="int">
            </return>
            <argument index="0" name="timeout" type="int">
            </argument>
            <description>
                Should be called periodically by your application to give GGPO.net
                a chance to do some work.  Most packet transmissions and rollbacks occur
                in ggpo_idle.
            </desctiption>
        </method>
        <method name="log">
            <return type="void">
            </return>
            <argument index="0" name="text" type="String">
            </argument>
            <description>
                Used to write to the ggpo.net log.  In the current versions of the
                SDK, a log file is only generated if the "quark.log" environment
                variable is set to 1.  This will change in future versions of the
                SDK.
            </description>
        </method>
        <method name="setDisconnectNotifyStart">
            <return type="int">
            </return>
            <argument index="0" name="timeout" type="int">
            </argument>
            <description>
                The time to wait before the first GGPO_EVENTCODE_NETWORK_INTERRUPTED timeout
                will be sent.
            </description>
        </method>
        <method name="setDisconnectTimeout">
            <return type="int">
            </return>
            <argument index="0" name="timeout" type="int">
            </argument>
            <description>
                Sets the disconnect timeout.  The session will automatically disconnect
                from a remote peer if it has not received a packet in the timeout window.
                You will be notified of the disconnect via a GGPO_EVENTCODE_DISCONNECTED_FROM_PEER
                event.
            </description>
        </method>
        <method name="setFrameDelay">
            <return type="int">
            </return>
            <argument index="0" name="playerHandle" type="int">
            </argument>
            <argument index="1" name="frameDelay" type="int">
            </argument>
            <description>
                Change the amount of frames ggpo will delay local input.  Must be called
                before the first call to ggpo_synchronize_input.
            </description>
        </method>
        <method name="startSession">
            <return type="int">
            </return>
            <argument index="0" name="game" type="String">
            </argument>
            <argument index="1" name="numPlayers" type="int">
            </argument>
            <argument index="2" name="localPort" type="int">
            </argument>
            <description>
                Used to begin a new GGPO.net session.  The ggpo object returned by ggpo_start_session
                uniquely identifies the state for this session and should be passed to all other
                functions.
            </description>
        </method>
        <method name="startSpectating">
            <return type="int">
            </return>
            <argument index="0" name="game" type="String">
            </argument>
            <argument index="1" name="numPlayers" type="int">
            </argument>
            <argument index="2" name="localPort" type="int">
            </argument>
            <argument index="3" name="hostIp" type="String">
            </argument>
            <argument index="4" name="hostPort" type="int">
            </argument>
            <description>
                Start a spectator session.
            </description>
        </method>
        <method name="startSynctest">
            <return type="int">
            </return>
            <argument index="0" name="game" type="String">
            </argument>
            <argument index="1" name="numPlayers" type="int">
            </argument>
            <argument index="2" name="frames" type="int">
            </argument>
            <description>
                Used to begin a new GGPO.net sync test session.  During a sync test, every
                frame of execution is run twice: once in prediction mode and once again to
                verify the result of the prediction.  If the checksums of your save states
                do not match, the test is aborted.
            </description>
        </method>
        <method name="synchronizeInput">
            <return type="Dictionary">
            </return>
            <argument index="0" name="inputs" type="Array">
            </argument>
            <argument index="1" name="length" type="int">
            </argument>
            <description>
                You should call ggpo_synchronize_input before every frame of execution,
                including those frames which happen during rollback.
                Returns a [Dictionary] containing the following:
                [*] [code]result[/code]: The error code of the method;
                [*] [code]disconnectFlags[/code]: The power-of-2 variable in the [code]2^i[/code] form that indicates whether the input in slot [code]i[/code] is valid. If a player has disconnected, GGPO.net will zero the input in the [code]inputs[/code] array for that player and set the i-th flag.
            </description>
        </method>
    </methods>
    <signals>
        <signal name="advance_frame">
            <description>
                Called during a rollback.  You should advance your game
                state by exactly one frame.  Before each frame, call ggpo_synchronize_input
                to retrieve the inputs you should use for that frame.  After each frame,
                you should call ggpo_advance_frame to notify GGPO.net that you're
                finished.
            </description>
        </signal>
        <signal name="event_connected_to_peer">
            <argument index="0" name="player" type="int">
            </argument>
            <description>
                Handshake with the game running on the
                other side of the network has been completed.
            </description>
        </signal>
        <signal name="event_connection_interrupted">
            <argument index="0" name="player" type="int">
            </argument>
            <argument index="1" name="disconnect_timeout" type="int">
            </argument>
            <description>
                Notifies that the timeout set from the [code]setDisconnectNotifyStart[/code] is elapsed.
            </description>
        </signal>
        <signal name="event_connection_resumed">
            <argument index="0" name="player" type="int">
            </argument>
            <description>
                Notifies that the session succeeded on recovering the [code]player[/code]'s connection before they disconnect.
            </description>
        </signal>
        <signal name="event_running">
            <description>
                All the clients have synchronized.  You may begin
                sending inputs with ggpo_synchronize_inputs.
            </description>
        </signal>
        <signal name="event_synchronized_with_peer">
            <argument index="0" name="player" type="int">
            </argument>
            <description>
                The synchronziation with this
                peer has finished.
            </description>
        </signal>
        <signal name="event_synchronizing_with_peer">
            <argument index="0" name="player" type="int">
            </argument>
            <argument index="1" name="count" type="int">
            </argument>
            <argument index="2" name="total" type="int">
            </argument>
            <description>
                Beginning the synchronization
                process with the client on the other end of the networking.  The count
                and total fields in the u.synchronizing struct of the GGPOEvent
                object indicate progress.
            </description>
        </signal>
        <signal name="event_disconnected_from_peer">
            <description>
                The network connection on 
                the other end of the network has closed.
            </description>
        </signal>
        <signal name="event_timesync">
            <argument index="0" name="frames_ahead" type="int">
            </argument>
            <description>
                The time synchronziation code has determined
                that this client is too far ahead of the other one and should slow
                down to ensure fairness.  The u.timesync.frames_ahead parameter in
                the GGPOEvent object indicates how many frames the client is.
            </description>
        </signal>
        <signal name="load_game_state">
            <argument index="0" name="buffer" type="PoolByteArray">
            </argument>
            <description>
                GGPO.net will call this function at the beginning
                of a rollback.  The buffer and len parameters contain a previously
                saved state returned from the save_game_state function.  The client
                should make the current game state match the state contained in the
                buffer.
            </description>
        </signal>
        <signal name="log_game_state">
            <argument index="0" name="filename" type="String">
            </argument>
            <argument index="1" name="buffer" type="PoolByteArray">
            </argument>
            <description>
                Used in diagnostic testing.  The client should use
                the ggpo_log function to write the contents of the specified save
                state in a human readible form.
            </description>
        </signal>
        <signal name="save_game_state">
            <description>
                The client should allocate a buffer, copy the
                entire contents of the current game state into it, and copy the
                length into the *len parameter.  Optionally, the client can compute
                a checksum of the data and store it in the *checksum argument.
            </description>
        </signal>
    </signals>
    <constants>
        <constant name="PLAYERTYPE_LOCAL" value="0">
        </constant>
        <constant name="PLAYERTYPE_REMOTE" value="1">
        </constant>
        <constant name="PLAYERTYPE_SPECTATOR" value="2">
        </constant>
        <constant name="MAX_PLAYERS" value="4">
        </constant>
        <constant name="MAX_PREDICTION_FRAMES" value="8">
        </constant>
        <constant name="MAX_SPECTATORS" value="32">
        </constant>
        <constant name="INVALID_HANDLE" value="-1">
        </constant>
        <constant name="ERRORCODE_SUCCESS" value="0">
        </constant>
        <constant name="ERRORCODE_GENERAL_FAILURE" value="-1">
        </constant>
        <constant name="ERRORCODE_INVALID_SESSION" value="1">
        </constant>
        <constant name="ERRORCODE_INVALID_PLAYER_HANDLE" value="2">
        </constant>
        <constant name="ERRORCODE_PLAYER_OUT_OF_RANGE" value="3">
        </constant>
        <constant name="ERRORCODE_PREDICTION_THRESHOLD" value="4">
        </constant>
        <constant name="ERRORCODE_UNSUPPORTED" value="5">
        </constant>
        <constant name="ERRORCODE_NOT_SYNCHRONIZED" value="6">
        </constant>
        <constant name="ERRORCODE_IN_ROLLBACK" value="7">
        </constant>
        <constant name="ERRORCODE_INPUT_DROPPED" value="8">
        </constant>
        <constant name="ERRORCODE_PLAYER_DISCONNECTED" value="9">
        </constant>
        <constant name="ERRORCODE_TOO_MANY_SPECTATORS" value="10">
        </constant>
        <constant name="ERRORCODE_INVALID_REQUEST" value="11">
        </constant>
        <constant name="EVENTCODE_CONNECTED_TO_PEER" value="1000">
        </constant>
        <constant name="EVENTCODE_SYNCHRONIZING_WITH_PEER" value="1001">
        </constant>
        <constant name="EVENTCODE_SYNCHRONIZED_WITH_PEER" value="1002">
        </constant>
        <constant name="EVENTCODE_RUNNING" value="1003">
        </constant>
        <constant name="EVENTCODE_DISCONNECTED_FROM_PEER" value="1004">
        </constant>
        <constant name="EVENTCODE_TIMESYNC" value="1005">
        </constant>
        <constant name="EVENTCODE_CONNECTION_INTERRUPTED" value="1006">
        </constant>
        <constant name="EVENTCODE_CONNECTION_RESUMED" value="1007">
        </constant>
    </constants>
</class>